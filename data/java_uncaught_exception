#!/usr/bin/python3

"""Receive details from ApportUncaughtExceptionHandler.

This generates and saves a problem report.
"""

# Copyright 2010 Canonical Ltd.
# Author: Matt Zimmerman <mdz@ubuntu.com>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.  See http://www.gnu.org/copyleft/gpl.html for
# the full text of the license.

import os
import sys
import urllib.parse

import apport.report
from apport.packaging_impl import impl as packaging


def make_title(report):
    """Construct crash title from stack trace."""
    lines = report["StackTrace"].split("\n")
    message = lines[0].strip()
    stackframe = lines[1].strip()
    return f"{message} in {stackframe}"


# pylint: disable-next=missing-function-docstring
def main():
    if not packaging.enabled():
        return 1

    # read from the JVM process a sequence of key, value delimited by null
    # bytes
    items = sys.stdin.read().split("\0")
    data = {}
    while items:
        key = items.pop(0)
        if not items:
            break
        value = items.pop(0)
        data[key] = value

    # create report
    report = apport.report.Report(problem_type="Crash")
    # assume our parent is the JVM process
    report.pid = os.getppid()

    report.add_os_info()
    report.add_proc_info()
    # these aren't relevant because the crash was in bytecode
    del report["ProcMaps"]
    del report["ProcStatus"]
    report.add_user_info()

    # add in data which was fed to us from the JVM process
    for key, value in data.items():
        report[key] = value

    # Add an ExecutablePath pointing to the file where the main class resides
    if "MainClassUrl" in report:
        url = report["MainClassUrl"]

        url_parts = urllib.parse.urlparse(url)
        path = url_parts.path

        if url_parts.scheme == "jar":
            # path is then a URL to the jar file
            url_parts = urllib.parse.urlparse(path)
            path = url_parts.path.split("!/", 1)[0]

        if url_parts.scheme == "file":
            report["ExecutablePath"] = path
        else:
            # Program at some non-file URL crashed. Give up.
            return 1

    report["Title"] = make_title(report)

    try:
        with apport.fileutils.make_report_file(report) as report_file:
            report.write(report_file)
    except OSError as error:
        apport.fatal("Cannot create report: %s", str(error))
    return 0


if __name__ == "__main__":
    sys.exit(main())
